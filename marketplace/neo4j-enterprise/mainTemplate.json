{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "adminPassword": {
        "type": "securestring"
      },
      "vmSize": {
        "type": "string"
      },
      "readReplicaVmSize": {
        "type": "string",
        "defaultValue": "Standard_B2s"
      },
      "graphDatabaseVersion": {
        "type": "string",
        "allowedValues": [
          "5",
          "4.4"
        ]
      },
      "installGraphDataScience": {
        "type": "string",
        "defaultValue": "No"
      },
      "graphDataScienceLicenseKey": {
        "type": "string",
        "defaultValue": "None"
      },
      "installBloom": {
        "type": "string",
        "defaultValue": "No"
      },
      "bloomLicenseKey": {
        "type": "string"
      },
      "nodeCount": {
        "type": "int",
        "allowedValues": [
          1,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10
        ]
      },
      "readReplicaCount": {
        "type": "int",
        "allowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10
        ],
        "defaultValue": 0
      },
      "diskSize": {
        "type": "int"
      },
      "readReplicaDiskSize": {
        "type": "int",
        "defaultValue": 32
      },
      "location": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]"
      },
      "utcValue": {
        "type": "string",
        "defaultValue": "[utcNow()]"
      },
      "_artifactsLocation": {
        "type": "string",
        "metadata": {
            "description": "The base URI where artifacts required by this template are located including a trailing '/'"
        },
          "defaultValue": "[deployment().properties.templateLink.uri]"
      },
      "_artifactsLocationSasToken": {
        "type": "securestring",
        "metadata": {
            "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
        },
        "defaultValue": ""
      }
    },
    "variables": {
      "uniqueString": "[uniquestring(resourceGroup().id, deployment().name)]",
      "loadBalancerBackendAddressPools": [
        {
          "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerName'), 'backend')]"
        }
      ],
      "networkSGName": "[concat('nsg-neo4j-',parameters('location'),'-',parameters('utcValue'))]",
      "vnetName": "[concat('vnet-neo4j-',parameters('location'),'-',parameters('utcValue'))]",
      "loadBalancerName": "[concat('lb-neo4j-',parameters('location'),'-',parameters('utcValue'))]",
      "publicIpName": "[concat('ip-neo4j-',parameters('location'),'-',parameters('utcValue'))]",
      "vmScaleSetsName": "[concat('vmss-neo4j-',parameters('location'),'-',parameters('utcValue'))]",
      "readReplicaVmScaleSetsName": "[concat('read-replica-vmss-neo4j-',parameters('location'),'-',parameters('utcValue'))]",
      "userAssignedIdentityName": "[concat('usermanaged-neo4j-',parameters('location'),'-',parameters('utcValue'))]",
      "roleAssignmentName": "[guid(concat('roleassignment-neo4j-',parameters('location'),'-',parameters('utcValue')))]",
      "azLoginIdentity": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.ManagedIdentity/userAssignedIdentities/',variables('userAssignedIdentityName'))]",
      "scriptName": "[if(equals(parameters('graphDatabaseVersion'),'5'),'scripts/neo4j-enterprise/node.sh','scripts/neo4j-enterprise/node4.sh')]",
      "bashCommand": "[if(equals(parameters('graphDatabaseVersion'),'5'),'bash node.sh ','bash node4.sh ')]",
      "roleDefName": "[guid(concat('customRoleDef-',parameters('location'),'-',parameters('utcValue')))]",
      "roleName": "[concat('customRole-',resourceGroup().name,'-',parameters('location'),'-',parameters('utcValue'))]",
      "adminUsername": "[string('neo4j')]",
      "doubleQuote": "\"",
      "readReplicaEnabledCondition": "[and(greaterOrEquals(parameters('readReplicaCount'),1),equals(parameters('graphDatabaseVersion'),'4.4'))]",
      "loadBalancerCondition": "[or(greaterOrEquals(parameters('nodeCount'),3),variables('readReplicaEnabledCondition'))]",
      "vmScaleSetsDependsOn": "[if(variables('loadBalancerCondition'),resourceId('Microsoft.Network/loadBalancers',variables('loadBalancerName')),resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')))]"
    },
    "resources": [
      {
        "name": "[variables('networkSGName')]",
        "type": "Microsoft.Network/networkSecurityGroups",
        "apiVersion": "2022-07-01",
        "location": "[parameters('location')]",
        "properties": {
          "securityRules": [
            {
              "name": "SSH",
              "properties": {
                "description": "SSH",
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "22",
                "sourceAddressPrefix": "Internet",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 100,
                "direction": "Inbound"
              }
            },
            {
              "name": "HTTPS",
              "properties": {
                "description": "HTTPS",
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "7473",
                "sourceAddressPrefix": "Internet",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 101,
                "direction": "Inbound"
              }
            },
            {
              "name": "HTTP",
              "properties": {
                "description": "HTTP",
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "7474",
                "sourceAddressPrefix": "Internet",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 102,
                "direction": "Inbound"
              }
            },
            {
              "name": "Bolt",
              "properties": {
                "description": "Bolt",
                "protocol": "Tcp",
                "sourcePortRange": "*",
                "destinationPortRange": "7687",
                "sourceAddressPrefix": "Internet",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 103,
                "direction": "Inbound"
              }
            }
          ]
        }
      },
      {
        "name": "[variables('vnetName')]",
        "type": "Microsoft.Network/virtualNetworks",
        "apiVersion": "2022-07-01",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSGName'))]"
        ],
        "properties": {
          "addressSpace": {
            "addressPrefixes": [
              "10.0.0.0/8"
            ]
          },
          "subnets": [
            {
              "name": "subnet",
              "properties": {
                "addressPrefix": "10.0.0.0/16",
                "networkSecurityGroup": {
                  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSGName'))]"
                }
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2022-05-01",
        "name": "[variables('publicIpName')]",
        "condition": "[variables('loadBalancerCondition')]",
        "location": "[parameters('location')]",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "zones": [
          "2",
          "3",
          "1"
        ],
        "properties": {
          "ipTags": [
            {
              "ipTagType": "RoutingPreference",
              "tag": "Internet"
            }
          ],
          "publicIPAddressVersion": "IPv4",
          "publicIPAllocationMethod": "Static"
        }
      },
      {
        "type": "Microsoft.Network/loadBalancers",
        "apiVersion": "2022-05-01",
        "name": "[variables('loadBalancerName')]",
        "condition": "[variables('loadBalancerCondition')]",
        "dependsOn": [
          "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpName'))]"
        ],
        "location": "[parameters('location')]",
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        },
        "properties": {
          "backendAddressPools": [
            {
              "name": "backend"
            }
          ],
          "frontendIPConfigurations": [
            {
              "name": "lbipnew",
              "properties": {
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIpName'))]"
                }
              }
            }
          ],
          "loadBalancingRules": [
            {
              "name": "inboundrule7474",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', variables('loadBalancerName'), 'lbipnew')]"
                },
                "frontendPort": 7474,
                "backendPort": 7474,
                "enableFloatingIP": false,
                "idleTimeoutInMinutes": 4,
                "protocol": "Tcp",
                "enableTcpReset": false,
                "loadDistribution": "Default",
                "disableOutboundSnat": true,
                "backendAddressPool": {
                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerName'), 'backend')]"
                },
                "backendAddressPools": [
                  {
                    "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerName'), 'backend')]"
                  }
                ],
                "probe": {
                  "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('loadBalancerName'),'httpprobe')]"
                }
              }
            },
            {
              "name": "inbound7687",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', variables('loadBalancerName'), 'lbipnew')]"
                },
                "frontendPort": 7687,
                "backendPort": 7687,
                "enableFloatingIP": false,
                "idleTimeoutInMinutes": 4,
                "protocol": "Tcp",
                "enableTcpReset": false,
                "loadDistribution": "Default",
                "disableOutboundSnat": true,
                "backendAddressPool": {
                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerName'), 'backend')]"
                },
                "backendAddressPools": [
                  {
                    "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadBalancerName'), 'backend')]"
                  }
                ],
                "probe": {
                  "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('loadBalancerName'),'boltprobe')]"
                }
              }
            }
          ],
          "probes": [
            {
              "name": "httpprobe",
              "properties": {
                "protocol": "Http",
                "port": 7474,
                "requestPath": "/",
                "intervalInSeconds": 5,
                "numberOfProbes": 1,
                "probeThreshold": 1
              }
            },
            {
              "name": "boltprobe",
              "properties": {
                "protocol": "Tcp",
                "port": 7687,
                "intervalInSeconds": 5,
                "numberOfProbes": 1,
                "probeThreshold": 1
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
        "name": "[variables('userAssignedIdentityName')]",
        "apiVersion": "2018-11-30",
        "location": "[parameters('location')]"
      },
      {
        "type": "Microsoft.Authorization/roleDefinitions",
        "apiVersion": "2018-07-01",
        "name": "[variables('roleDefName')]",
        "properties": {
          "roleName": "[variables('roleName')]",
          "description": "Allow access to create tags on vmss",
          "type": "customRole",
          "permissions": [
            {
              "actions": [
                "Microsoft.Compute/virtualMachineScaleSets/read",
                "Microsoft.Compute/virtualMachineScaleSets/*/read",
                "Microsoft.Resources/tags/write",
                "Microsoft.Resources/tags/read",
                "Microsoft.Resources/tags/delete"
              ]
            }
          ],
          "assignableScopes": [
            "[resourceGroup().id]"
          ]
        }
      },
      {
        "type": "Microsoft.Authorization/roleAssignments",
        "dependsOn" : [
          "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities',variables('userAssignedIdentityName'))]",
          "[resourceId('Microsoft.Authorization/roleDefinitions',variables('roleDefName'))]"
        ],
        "apiVersion": "2022-04-01",
        "name": "[variables('roleAssignmentName')]",
        "properties": {
          "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions',variables('roleDefName'))]",
          "principalType": "ServicePrincipal",
          "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userAssignedIdentityName'))).principalId]"
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachineScaleSets",
        "name": "[variables('vmScaleSetsName')]",
        "location": "[parameters('location')]",
        "apiVersion": "2018-06-01",
        "dependsOn": [
          "[resourceId('Microsoft.Authorization/roleAssignments',variables('roleAssignmentName'))]",
          "[variables('vmScaleSetsDependsOn')]"
        ],
        "identity": {
          "type": "userAssigned",
          "userAssignedIdentities": {
            "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',variables('userAssignedIdentityName'))]": {}
          }
        },
        "plan": {
          "publisher": "neo4j",
          "product": "neo4j-ee-vm",
          "name": "byol"
        },
        "sku": {
          "name": "[parameters('vmSize')]",
          "capacity": "[parameters('nodeCount')]"
        },
        "properties": {
          "overprovision": false,
          "upgradePolicy": {
            "mode": "Manual"
          },
          "virtualMachineProfile": {
            "storageProfile": {
              "osDisk": {
                "createOption": "FromImage"
              },
              "imageReference": {
                "publisher": "Neo4j",
                "offer": "neo4j-ee-vm",
                "sku": "byol",
                "version": "latest"
              },
              "dataDisks": [
                {
                  "lun": 0,
                  "createOption": "Empty",
                  "managedDisk": {
                    "storageAccountType": "Premium_LRS"
                  },
                  "caching": "None",
                  "diskSizeGB": "[parameters('diskSize')]"
                }
              ]
            },
            "osProfile": {
              "computerNamePrefix": "node",
              "adminUsername": "[variables('adminUsername')]",
              "adminPassword": "[parameters('adminPassword')]"
            },
            "networkProfile": {
              "networkInterfaceConfigurations": [
                {
                  "name": "nic",
                  "properties": {
                    "primary": true,
                    "ipConfigurations": [
                      {
                        "name": "ipconfig-cluster",
                        "properties": {
                          "subnet": {
                            "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), 'subnet')]"
                          },
                          "publicipaddressconfiguration": {
                            "name": "public",
                            "properties": {
                              "idleTimeoutInMinutes": 30,
                              "dnsSettings": {
                                "domainNameLabel": "[concat('node-', variables('uniqueString'))]"
                              }
                            }
                          },
                          "loadBalancerBackendAddressPools": "[if(variables('loadBalancerCondition'), variables('loadBalancerBackendAddressPools'), json('null'))]"
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "extensionProfile": {
              "extensions": [
                {
                  "name": "extension",
                  "properties": {
                    "publisher": "Microsoft.Azure.Extensions",
                    "type": "CustomScript",
                    "typeHandlerVersion": "2.0",
                    "autoUpgradeMinorVersion": true,
                    "settings": {
                      "fileUris": [
                        "[uri(parameters('_artifactsLocation'), concat(variables('scriptName'), parameters('_artifactsLocationSasToken')))]"
                      ]
                    },
                    "protectedSettings": {
                      "commandToExecute": "[concat(variables('bashCommand'), variables('adminUsername'), ' ',variables('doubleQuote'),parameters('adminPassword'),variables('doubleQuote'), ' ', variables('uniqueString'), ' ', parameters('location'), ' ', parameters('graphDatabaseVersion'), ' ', parameters('installGraphDataScience'), ' ', parameters('graphDataScienceLicenseKey'), ' ', parameters('installBloom'), ' ', parameters('bloomLicenseKey'), ' ', parameters('nodeCount'), ' ',if(equals(parameters('graphDatabaseVersion'),'4.4'),concat(parameters('readReplicaCount'),' '),''), if(variables('loadBalancerCondition'),reference(resourceId('Microsoft.Network/publicIPAddresses',variables('publicIpName')),'2022-05-01').ipAddress,'-'), ' ',variables('azLoginIdentity'), ' ',resourceGroup().name, ' ',variables('vmScaleSetsName'))]"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachineScaleSets",
        "name": "[variables('readReplicaVmScaleSetsName')]",
        "location": "[parameters('location')]",
        "apiVersion": "2018-06-01",
        "condition": "[variables('readReplicaEnabledCondition')]",
        "dependsOn": [
          "[resourceId('Microsoft.Compute/virtualMachineScaleSets',variables('vmScaleSetsName'))]"
        ],
        "identity": {
          "type": "userAssigned",
          "userAssignedIdentities": {
            "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',variables('userAssignedIdentityName'))]": {}
          }
        },
        "plan": {
          "publisher": "neo4j",
          "product": "neo4j-ee-vm",
          "name": "byol"
        },
        "sku": {
          "name": "[parameters('readReplicaVmSize')]",
          "capacity": "[parameters('readReplicaCount')]"
        },
        "properties": {
          "overprovision": false,
          "upgradePolicy": {
            "mode": "Manual"
          },
          "virtualMachineProfile": {
            "storageProfile": {
              "osDisk": {
                "createOption": "FromImage"
              },
              "imageReference": {
                "publisher": "Neo4j",
                "offer": "neo4j-ee-vm",
                "sku": "byol",
                "version": "latest"
              },
              "dataDisks": [
                {
                  "lun": 0,
                  "createOption": "Empty",
                  "managedDisk": {
                    "storageAccountType": "Premium_LRS"
                  },
                  "caching": "None",
                  "diskSizeGB": "[parameters('readReplicaDiskSize')]"
                }
              ]
            },
            "osProfile": {
              "computerNamePrefix": "node",
              "adminUsername": "[variables('adminUsername')]",
              "adminPassword": "[parameters('adminPassword')]"
            },
            "networkProfile": {
              "networkInterfaceConfigurations": [
                {
                  "name": "nic-read-replica",
                  "properties": {
                    "primary": true,
                    "ipConfigurations": [
                      {
                        "name": "ipconfig-read-replica",
                        "properties": {
                          "subnet": {
                            "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), 'subnet')]"
                          },
                          "publicipaddressconfiguration": {
                            "name": "public-read-replica",
                            "properties": {
                              "idleTimeoutInMinutes": 30,
                              "dnsSettings": {
                                "domainNameLabel": "[concat('rr-', variables('uniqueString'))]"
                              }
                            }
                          },
                          "loadBalancerBackendAddressPools": "[variables('loadBalancerBackendAddressPools')]"
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "extensionProfile": {
              "extensions": [
                {
                  "name": "extension",
                  "properties": {
                    "publisher": "Microsoft.Azure.Extensions",
                    "type": "CustomScript",
                    "typeHandlerVersion": "2.0",
                    "autoUpgradeMinorVersion": true,
                    "settings": {
                      "fileUris": [
                        "[uri(parameters('_artifactsLocation'), concat('scripts/neo4j-enterprise/readreplica4.sh', parameters('_artifactsLocationSasToken')))]"
                      ]
                    },
                    "protectedSettings": {
                      "commandToExecute": "[concat('bash readreplica4.sh', ' ',variables('doubleQuote'),parameters('adminPassword'),variables('doubleQuote'), ' ',variables('azLoginIdentity'), ' ',resourceGroup().name, ' ',variables('vmScaleSetsName'),' ', parameters('installGraphDataScience'), ' ', parameters('graphDataScienceLicenseKey'), ' ', parameters('installBloom'), ' ', parameters('bloomLicenseKey'))]"
                    }
                  }
                }
              ]
            }
          }
        }
      }

    ],
    "outputs": {
      "Neo4jBrowserURL": {
        "condition": "[not(variables('loadBalancerCondition'))]",
        "type": "string",
        "value": "[uri(concat('http://vm0.node-', variables('uniqueString'), '.', parameters('location'),'.cloudapp.azure.com:7474'),'')]"
      },
      "Neo4jClusterBrowserURL": {
        "condition": "[variables('loadBalancerCondition')]",
        "type": "string",
        "value": "[uri(concat('http://',reference(resourceId('Microsoft.Network/publicIPAddresses',variables('publicIpName')),'2022-05-01').ipAddress,':7474'),'')]"
      },
      "Neo4jClusterBloomURL": {
        "condition": "[and(equals(parameters('installBloom'),'Yes'),variables('loadBalancerCondition'))]",
        "type": "string",
        "value": "[uri(concat('http://',reference(resourceId('Microsoft.Network/publicIPAddresses',variables('publicIpName')),'2022-05-01').ipAddress,':7474'),'bloom')]"
      },
      "Neo4jBloomURL": {
        "condition": "[and(equals(parameters('installBloom'),'Yes'),not(variables('loadBalancerCondition')))]",
        "type": "string",
        "value": "[uri(concat('http://vm0.node-', variables('uniqueString'), '.', parameters('location'),'.cloudapp.azure.com:7474'),'bloom')]"
      },

      "Username": {
        "type": "string",
        "value": "neo4j"
      }
    }
  }
